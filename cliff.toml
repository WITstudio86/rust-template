# 配置文件是用于 git-cliff 的 Changelog 生成器
# 官方文档: https://git-cliff.org/docs/configuration

[changelog]
# 定义 Changelog 文件的头部内容
header = """
# Changelog\n
All notable changes to this project will be documented in this file. See [conventional commits](https://www.conventionalcommits.org/) for commit guidelines.
"""
# 定义 Changelog 正文的模板，使用 Tera 模板语言
# Tera 模板语言文档: https://keats.github.io/tera/docs/#introduction
body = """
---
{% if version %}
    {% if previous.version %}
        ## [{{ version | trim_start_matches(pat="v") }}]($REPO/compare/{{ previous.version }}..{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
    {% else %}
        ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
    {% endif %}
{% else %}
    ## [unreleased]
{% endif %}
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    ...
{% endfor %}
"""
# 定义 Changelog 文件的尾部内容
footer = """
<!-- generated by git-cliff -->
"""
# 移除模板字符串首尾的空白字符
trim = true
# 定义 postprocessors，用于替换模板中的变量或模式
postprocessors = [
    # 替换 $REPO 为实际的仓库地址
    { pattern = '\$REPO', replace = "https://github.com/WITstudio86/" },
]

[git]
# 是否解析遵循 conventional commits 规范的提交
conventional_commits = true
# 是否过滤掉非 conventional commits 规范的提交
filter_unconventional = false
# 是否将每个提交的每个正文行作为单独的提交处理
split_commits = false
# 提交消息的预处理正则表达式列表
commit_preprocessors = [
    # 替换 Issue 编号为链接形式
    # { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/orhun/git-cliff/issues/${2}))" },
]
# 解析和分组提交的正则表达式列表
commit_parsers = [
    # 定义如何根据提交消息分组
    { message = "\\[skip", skip = true },
    # 定义其他分组规则...
]
# 是否保护破坏性更改不被跳过
protect_breaking_commits = false
# 是否过滤掉不符合 commit parsers 的提交
filter_commits = false
# 匹配 git 标签的正则表达式
tag_pattern = "v[0-9].*"
# 跳过匹配的标签
skip_tags = "v0.1.0-beta.1"
# 忽略匹配的标签
ignore_tags = ""
# 是否按照拓扑排序排序标签
topo_order = false
# 小节内提交的排序方式，"oldest" 或 "newest"
sort_commits = "oldest"
# 限制在 Changelog 中包含的提交数量
# limit_commits = 42
